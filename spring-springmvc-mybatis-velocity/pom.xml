<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">

	<modelVersion>4.0.0</modelVersion>

	<groupId>com.ssmm</groupId>
	<artifactId>ssmm</artifactId>
	<version>1.0-SNAPSHOT</version>

	<name>ssmm</name>
	<packaging>war</packaging>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
	</properties>

	<dependencies>
		<!-- json -->
		<dependency>
			<groupId>com.alibaba</groupId>
			<artifactId>fastjson</artifactId>
			<version>1.1.39</version>
		</dependency>
		<!-- servlet -->
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>servlet-api</artifactId>
			<version>2.5</version>
			<scope>provided</scope>
		</dependency>
		<!-- spring -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-core</artifactId>
			<version>3.2.6.RELEASE</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-beans</artifactId>
			<version>3.2.6.RELEASE</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-context</artifactId>
			<version>3.2.6.RELEASE</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-web</artifactId>
			<version>3.2.6.RELEASE</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-webmvc</artifactId>
			<version>3.2.6.RELEASE</version>
		</dependency>
		<!-- 这个是使用velocity的必备包 -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-context-support</artifactId>
			<version>3.2.6.RELEASE</version>
			<scope>compile</scope>
		</dependency>
		<!-- mysql -->
		<dependency>
			<groupId>mysql</groupId>
			<artifactId>mysql-connector-java</artifactId>
			<version>5.1.27</version>
			<scope>runtime</scope>
		</dependency>
		<!-- 数据源 -->
		<dependency>
			<groupId>org.apache.tomcat</groupId>
			<artifactId>tomcat-jdbc</artifactId>
			<version>7.0.47</version>
		</dependency>
		<!-- mybatis -->
		<dependency>
			<groupId>org.mybatis</groupId>
			<artifactId>mybatis</artifactId>
			<version>3.1.1</version>
		</dependency>
		<dependency>
			<groupId>org.mybatis</groupId>
			<artifactId>mybatis-spring</artifactId>
			<version>1.1.1</version>
		</dependency>
		<!-- velocity -->
		<dependency>
			<groupId>org.apache.velocity</groupId>
			<artifactId>velocity</artifactId>
			<version>1.5</version>
		</dependency>
		<dependency>
			<groupId>velocity-tools</groupId>
			<artifactId>velocity-tools-generic</artifactId>
			<version>1.2</version>
		</dependency>
	</dependencies>

	<build>
		<resources>
			<!-- 
				maven涉及到 多个子模块时配置参数参考内容
				这里配置了这一块儿true，才可以让指定文件（这里是src/main/resources/spring-data.xml）读到pom.xml中的配置信息 
				， 值得注意的是，如果src/main/resources下还有其他文件，而你不想让其读pom.xml， 
				必须得把src/main/resources下的其余文件再配置一遍，配置为false（不可读pom.xml）， 
				如下边的注释那样，否则，会报这些文件（在这里，就是*.properties）找不到的错误
			 -->
			<resource>
				<directory>src/main/resources</directory>
				<filtering>true</filtering>
				<includes>
					<include>*.xml</include>
				</includes>
			</resource>
			<!-- <resource> <directory>src/main/resources</directory> <filtering>false</filtering> 
				<includes> <include>*.properties</include> </includes> </resource> -->
			<resource>
				<directory>src/main/resources</directory>
				<filtering>false</filtering>
				<includes>
					<!-- 这里如果不加这一条，那么在spring-data.xml中配置的xml将找不到classpath:mapper/admin/AdminMapper.xml -->
					<include>mapper/**/*.xml</include>
				</includes>
			</resource>
		</resources>
	</build>

	<!-- 
		配置多种开发环境(开发、线上、测试等环境)	
		profiles可以定义多个profile，然后每个profile对应不同的激活条件和配置信息，从而达到不同环境使用不同配置信息的效果 
		注意两点： 1）<activeByDefault>true</activeByDefault>这种情况表示服务器启动的时候就采用这一套env（在这里，就是prod） 
		2）当我们启动服务器后，想采用开发模式，需切换maven的env为dev，如果env的配置本身就是dev，需要将env换成rc或prod，点击apply，然后再将env切换成dev，点击apply才行
	-->
	<profiles>
		<!-- 开发env -->
		<profile>
			<id>dev</id>
			<activation>
				<activeByDefault>false</activeByDefault>
				<property>
					<name>env</name>
					<value>dev</value>
				</property>
			</activation>
			<properties>
				<env>dev</env>

				<jdbc.driverClassName>com.mysql.jdbc.Driver</jdbc.driverClassName>
				<!-- 对于jdbc.url中内容的配置，如果需要配置 &amp;时，有两种方法： 1）如下边这样，使用<![CDATA[XXX]]>包起来 
					2）使用jdbc.properties文件来读取此pom.xml，然后spring.xml再读取jdbc.properties文件 显然，前者更方便，而且还省了一个jdbc.properties的文件，但是，有的时候，还是会用后者的； 
					在使用后者的时候，注意三点： 1）需要修改上边的build中的内容 2）需要在spring.xml中配置<context:property-placeholder 
					location="classpath:jdbc.properties"/> 3）将jdbc.properties放在ssmm0-data项目中，之后需要将ssmm0-data项目的env配置为dev -->
				<jdbc.url><![CDATA[jdbc:mysql://127.0.0.1:3306/blog?zeroDateTimeBehavior=convertToNull&amp;useUnicode=true&amp;characterEncoding=utf-8]]></jdbc.url>
				<jdbc.username>root</jdbc.username>
				<jdbc.password>123456</jdbc.password>
			</properties>
		</profile>
		<!-- 预上线env -->
		<profile>
			<id>rc</id>
			<activation>
				<activeByDefault>false</activeByDefault>
				<property>
					<name>env</name>
					<value>rc</value>
				</property>
			</activation>
			<properties>
				<env>rc</env>

				<jdbc.driverClassName>com.mysql.jdbc.Driver</jdbc.driverClassName>
				<!-- 假设的一个地址 -->
				<jdbc.url><![CDATA[jdbc:mysql://10.10.10.100:3306/blog?zeroDateTimeBehavior=convertToNull&amp;useUnicode=true&amp;characterEncoding=utf-8]]></jdbc.url>
				<jdbc.username>root2</jdbc.username>
				<jdbc.password>1234562</jdbc.password>
			</properties>
		</profile>
		<!-- 线上env -->
		<profile>
			<id>prod</id>
			<activation>
				<activeByDefault>true</activeByDefault>
				<property>
					<name>env</name>
					<value>prod</value>
				</property>
			</activation>
			<properties>
				<env>prod</env>

				<jdbc.driverClassName>com.mysql.jdbc.Driver</jdbc.driverClassName>
				<!-- 假设的一个地址 -->
				<jdbc.url><![CDATA[jdbc:mysql://99.99.99.999:3307/blog?zeroDateTimeBehavior=convertToNull&amp;useUnicode=true&amp;characterEncoding=utf-8]]></jdbc.url>
				<jdbc.username>sadhijhqwui</jdbc.username>
				<jdbc.password>zxczkchwihcznk=</jdbc.password>
			</properties>
		</profile>
	</profiles>

</project>